"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
self["webpackHotUpdate_N_E"]("pages/predict",{

/***/ "./lib/api.ts":
/*!********************!*\
  !*** ./lib/api.ts ***!
  \********************/
/***/ (function(module, __webpack_exports__, __webpack_require__) {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   api: function() { return /* binding */ api; }\n/* harmony export */ });\n/* harmony import */ var axios__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! axios */ \"./node_modules/axios/index.js\");\n\nconst API_BASE_URL =  true ? \"\".concat(\"http://localhost:8000\", \"/api/v1\") : 0;\n// API Functions\nconst api = {\n    // Introspection\n    getBaseUrl () {\n        return API_BASE_URL;\n    },\n    // Prediction APIs\n    async predictColleges (request) {\n        try {\n            const response = await axios__WEBPACK_IMPORTED_MODULE_0__[\"default\"].post(\"\".concat(API_BASE_URL, \"/predict\"), request);\n            return response.data;\n        } catch (error) {\n            var _error_response_data, _error_response;\n            throw new Error(((_error_response = error.response) === null || _error_response === void 0 ? void 0 : (_error_response_data = _error_response.data) === null || _error_response_data === void 0 ? void 0 : _error_response_data.detail) || \"Failed to get predictions\");\n        }\n    },\n    // AI Picks (AI-ranked predictions)\n    async predictAI (request) {\n        try {\n            const response = await axios__WEBPACK_IMPORTED_MODULE_0__[\"default\"].post(\"\".concat(API_BASE_URL, \"/predict/ai\"), request);\n            return response.data;\n        } catch (error) {\n            var _error_response_data, _error_response;\n            throw new Error(((_error_response = error.response) === null || _error_response === void 0 ? void 0 : (_error_response_data = _error_response.data) === null || _error_response_data === void 0 ? void 0 : _error_response_data.detail) || \"Failed to get AI picks\");\n        }\n    },\n    // AI Picks Diagnose\n    async aiPicksDiagnose (params) {\n        const { exam = \"neet\", states = [], limit = 20 } = params || {};\n        try {\n            const response = await axios__WEBPACK_IMPORTED_MODULE_0__[\"default\"].get(\"\".concat(API_BASE_URL, \"/predict/ai/diagnose\"), {\n                params: {\n                    exam,\n                    states: states.join(\",\") || undefined,\n                    limit\n                }\n            });\n            return response.data;\n        } catch (error) {\n            var _error_response_data, _error_response;\n            throw new Error(((_error_response = error.response) === null || _error_response === void 0 ? void 0 : (_error_response_data = _error_response.data) === null || _error_response_data === void 0 ? void 0 : _error_response_data.detail) || \"Failed to diagnose AI picks\");\n        }\n    },\n    // Combined predictions (multi-exam)\n    async predictCombined (payload) {\n        try {\n            const response = await axios__WEBPACK_IMPORTED_MODULE_0__[\"default\"].post(\"\".concat(API_BASE_URL, \"/predict/combined\"), payload);\n            return response.data;\n        } catch (error) {\n            var _error_response_data, _error_response;\n            throw new Error(((_error_response = error.response) === null || _error_response === void 0 ? void 0 : (_error_response_data = _error_response.data) === null || _error_response_data === void 0 ? void 0 : _error_response_data.detail) || \"Failed to load combined predictions\");\n        }\n    },\n    // Live seat availability (stub)\n    async getLiveSeats (params) {\n        const { exam = \"jee\", state } = params;\n        try {\n            const response = await axios__WEBPACK_IMPORTED_MODULE_0__[\"default\"].get(\"\".concat(API_BASE_URL, \"/live-seats\"), {\n                params: {\n                    exam,\n                    state\n                }\n            });\n            return response.data;\n        } catch (error) {\n            var _error_response_data, _error_response;\n            throw new Error(((_error_response = error.response) === null || _error_response === void 0 ? void 0 : (_error_response_data = _error_response.data) === null || _error_response_data === void 0 ? void 0 : _error_response_data.detail) || \"Failed to fetch live seats\");\n        }\n    },\n    // Gamification\n    async getUserProgress (userId) {\n        try {\n            const response = await axios__WEBPACK_IMPORTED_MODULE_0__[\"default\"].get(\"\".concat(API_BASE_URL, \"/gamification/\").concat(userId));\n            return response.data;\n        } catch (error) {\n            var _error_response_data, _error_response;\n            throw new Error(((_error_response = error.response) === null || _error_response === void 0 ? void 0 : (_error_response_data = _error_response.data) === null || _error_response_data === void 0 ? void 0 : _error_response_data.detail) || \"Failed to get user progress\");\n        }\n    },\n    async earnPoints (userId) {\n        let action = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : \"prediction\", points = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : 10;\n        try {\n            const response = await axios__WEBPACK_IMPORTED_MODULE_0__[\"default\"].post(\"\".concat(API_BASE_URL, \"/gamification/\").concat(userId, \"/earn\"), {\n                action,\n                points\n            });\n            return response.data;\n        } catch (error) {\n            var _error_response_data, _error_response;\n            throw new Error(((_error_response = error.response) === null || _error_response === void 0 ? void 0 : (_error_response_data = _error_response.data) === null || _error_response_data === void 0 ? void 0 : _error_response_data.detail) || \"Failed to earn points\");\n        }\n    },\n    async getSamplePredictions () {\n        try {\n            const response = await axios__WEBPACK_IMPORTED_MODULE_0__[\"default\"].get(\"\".concat(API_BASE_URL, \"/predict/sample\"));\n            return response.data;\n        } catch (error) {\n            var _error_response_data, _error_response;\n            throw new Error(((_error_response = error.response) === null || _error_response === void 0 ? void 0 : (_error_response_data = _error_response.data) === null || _error_response_data === void 0 ? void 0 : _error_response_data.detail) || \"Failed to get sample predictions\");\n        }\n    },\n    // Features: Trends\n    async getRankTrends (collegeName, exam) {\n        let years = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : 5;\n        try {\n            const response = await axios__WEBPACK_IMPORTED_MODULE_0__[\"default\"].get(\"\".concat(API_BASE_URL, \"/trends\"), {\n                params: {\n                    college: collegeName,\n                    exam,\n                    years\n                }\n            });\n            return response.data;\n        } catch (error) {\n            var _error_response_data, _error_response;\n            throw new Error(((_error_response = error.response) === null || _error_response === void 0 ? void 0 : (_error_response_data = _error_response.data) === null || _error_response_data === void 0 ? void 0 : _error_response_data.detail) || \"Failed to get rank trends\");\n        }\n    },\n    // Features: AI Summary\n    async getAISummary (collegeName) {\n        try {\n            const response = await axios__WEBPACK_IMPORTED_MODULE_0__[\"default\"].post(\"\".concat(API_BASE_URL, \"/ai/summary\"), {\n                college_name: collegeName\n            });\n            return response.data;\n        } catch (error) {\n            var _error_response_data, _error_response;\n            throw new Error(((_error_response = error.response) === null || _error_response === void 0 ? void 0 : (_error_response_data = _error_response.data) === null || _error_response_data === void 0 ? void 0 : _error_response_data.detail) || \"Failed to get AI summary\");\n        }\n    },\n    // Features: Predict Future\n    async predictFuture (payload) {\n        try {\n            const response = await axios__WEBPACK_IMPORTED_MODULE_0__[\"default\"].post(\"\".concat(API_BASE_URL, \"/predict/future\"), payload);\n            return response.data;\n        } catch (error) {\n            var _error_response_data, _error_response;\n            throw new Error(((_error_response = error.response) === null || _error_response === void 0 ? void 0 : (_error_response_data = _error_response.data) === null || _error_response_data === void 0 ? void 0 : _error_response_data.detail) || \"Failed to predict future colleges\");\n        }\n    },\n    // Features: Save / Compare / Alerts\n    async saveCollege (userId, college) {\n        try {\n            const response = await axios__WEBPACK_IMPORTED_MODULE_0__[\"default\"].post(\"\".concat(API_BASE_URL, \"/saves\"), {\n                user_id: userId,\n                college\n            });\n            return response.data;\n        } catch (error) {\n            var _error_response_data, _error_response;\n            throw new Error(((_error_response = error.response) === null || _error_response === void 0 ? void 0 : (_error_response_data = _error_response.data) === null || _error_response_data === void 0 ? void 0 : _error_response_data.detail) || \"Failed to save college\");\n        }\n    },\n    async listSaved (userId) {\n        try {\n            const response = await axios__WEBPACK_IMPORTED_MODULE_0__[\"default\"].get(\"\".concat(API_BASE_URL, \"/saves\"), {\n                params: {\n                    user_id: userId\n                }\n            });\n            return response.data;\n        } catch (error) {\n            var _error_response_data, _error_response;\n            throw new Error(((_error_response = error.response) === null || _error_response === void 0 ? void 0 : (_error_response_data = _error_response.data) === null || _error_response_data === void 0 ? void 0 : _error_response_data.detail) || \"Failed to list saved colleges\");\n        }\n    },\n    async compareColleges (colleges) {\n        try {\n            const response = await axios__WEBPACK_IMPORTED_MODULE_0__[\"default\"].post(\"\".concat(API_BASE_URL, \"/compare\"), {\n                colleges\n            });\n            return response.data;\n        } catch (error) {\n            var _error_response_data, _error_response;\n            throw new Error(((_error_response = error.response) === null || _error_response === void 0 ? void 0 : (_error_response_data = _error_response.data) === null || _error_response_data === void 0 ? void 0 : _error_response_data.detail) || \"Failed to compare colleges\");\n        }\n    },\n    async subscribeAlerts (email) {\n        let exam = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : \"jee\";\n        try {\n            const response = await axios__WEBPACK_IMPORTED_MODULE_0__[\"default\"].post(\"\".concat(API_BASE_URL, \"/alerts/subscribe\"), {\n                email,\n                exam\n            });\n            return response.data;\n        } catch (error) {\n            var _error_response_data, _error_response;\n            throw new Error(((_error_response = error.response) === null || _error_response === void 0 ? void 0 : (_error_response_data = _error_response.data) === null || _error_response_data === void 0 ? void 0 : _error_response_data.detail) || \"Failed to subscribe to alerts\");\n        }\n    },\n    // College APIs\n    async getCollegeInfo (collegeName) {\n        try {\n            const response = await axios__WEBPACK_IMPORTED_MODULE_0__[\"default\"].get(\"\".concat(API_BASE_URL, \"/college/\").concat(encodeURIComponent(collegeName)));\n            return response.data;\n        } catch (error) {\n            var _error_response_data, _error_response;\n            throw new Error(((_error_response = error.response) === null || _error_response === void 0 ? void 0 : (_error_response_data = _error_response.data) === null || _error_response_data === void 0 ? void 0 : _error_response_data.detail) || \"Failed to get college information\");\n        }\n    },\n    async getAllColleges (params) {\n        try {\n            const response = await axios__WEBPACK_IMPORTED_MODULE_0__[\"default\"].get(\"\".concat(API_BASE_URL, \"/colleges\"), {\n                params\n            });\n            return response.data;\n        } catch (error) {\n            var _error_response_data, _error_response;\n            throw new Error(((_error_response = error.response) === null || _error_response === void 0 ? void 0 : (_error_response_data = _error_response.data) === null || _error_response_data === void 0 ? void 0 : _error_response_data.detail) || \"Failed to get colleges\");\n        }\n    },\n    // Search APIs\n    async searchColleges (query, filters) {\n        try {\n            const params = new URLSearchParams({\n                query\n            });\n            if (filters) {\n                Object.keys(filters).forEach((key)=>{\n                    if (filters[key]) {\n                        params.append(key, filters[key]);\n                    }\n                });\n            }\n            const response = await axios__WEBPACK_IMPORTED_MODULE_0__[\"default\"].get(\"\".concat(API_BASE_URL, \"/search?\").concat(params.toString()));\n            return response.data;\n        } catch (error) {\n            var _error_response_data, _error_response;\n            throw new Error(((_error_response = error.response) === null || _error_response === void 0 ? void 0 : (_error_response_data = _error_response.data) === null || _error_response_data === void 0 ? void 0 : _error_response_data.detail) || \"Failed to search colleges\");\n        }\n    },\n    // State + Ownership APIs\n    async getSupportedStates () {\n        let exam = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : \"jee\";\n        try {\n            const response = await axios__WEBPACK_IMPORTED_MODULE_0__[\"default\"].get(\"\".concat(API_BASE_URL, \"/colleges/states\"), {\n                params: {\n                    exam\n                }\n            });\n            return response.data.states || [];\n        } catch (error) {\n            var _error_response_data, _error_response;\n            throw new Error(((_error_response = error.response) === null || _error_response === void 0 ? void 0 : (_error_response_data = _error_response.data) === null || _error_response_data === void 0 ? void 0 : _error_response_data.detail) || \"Failed to get states\");\n        }\n    },\n    // Branch browsing (JEE)\n    async listJEEBranches () {\n        let limit = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : 0;\n        try {\n            const response = await axios__WEBPACK_IMPORTED_MODULE_0__[\"default\"].get(\"\".concat(API_BASE_URL, \"/colleges/branches\"), {\n                params: {\n                    exam: \"jee\",\n                    limit\n                }\n            });\n            return response.data;\n        } catch (error) {\n            var _error_response_data, _error_response;\n            throw new Error(((_error_response = error.response) === null || _error_response === void 0 ? void 0 : (_error_response_data = _error_response.data) === null || _error_response_data === void 0 ? void 0 : _error_response_data.detail) || \"Failed to load branches\");\n        }\n    },\n    async getCollegesByBranch (params) {\n        const { branch, rank, limit = 100, category = \"General\" } = params;\n        try {\n            const response = await axios__WEBPACK_IMPORTED_MODULE_0__[\"default\"].get(\"\".concat(API_BASE_URL, \"/colleges/by-branch\"), {\n                params: {\n                    branch,\n                    rank,\n                    limit,\n                    category\n                }\n            });\n            return response.data;\n        } catch (error) {\n            var _error_response_data, _error_response;\n            throw new Error(((_error_response = error.response) === null || _error_response === void 0 ? void 0 : (_error_response_data = _error_response.data) === null || _error_response_data === void 0 ? void 0 : _error_response_data.detail) || \"Failed to load colleges for branch\");\n        }\n    },\n    async getCollegesByState (params) {\n        const { state, ownership, exam = \"jee\", limit = 200 } = params;\n        try {\n            const response = await axios__WEBPACK_IMPORTED_MODULE_0__[\"default\"].get(\"\".concat(API_BASE_URL, \"/colleges/by-state\"), {\n                params: {\n                    state,\n                    ownership,\n                    exam,\n                    limit\n                }\n            });\n            return response.data;\n        } catch (error) {\n            var _error_response_data, _error_response;\n            throw new Error(((_error_response = error.response) === null || _error_response === void 0 ? void 0 : (_error_response_data = _error_response.data) === null || _error_response_data === void 0 ? void 0 : _error_response_data.detail) || \"Failed to get colleges by state\");\n        }\n    },\n    // Exam APIs\n    async getSupportedExams () {\n        try {\n            const response = await axios__WEBPACK_IMPORTED_MODULE_0__[\"default\"].get(\"\".concat(API_BASE_URL, \"/exams\"));\n            return response.data.exams;\n        } catch (error) {\n            var _error_response_data, _error_response;\n            throw new Error(((_error_response = error.response) === null || _error_response === void 0 ? void 0 : (_error_response_data = _error_response.data) === null || _error_response_data === void 0 ? void 0 : _error_response_data.detail) || \"Failed to get supported exams\");\n        }\n    },\n    // Health check\n    async healthCheck () {\n        try {\n            const response = await axios__WEBPACK_IMPORTED_MODULE_0__[\"default\"].get(\"\".concat(API_BASE_URL, \"/health\"));\n            return response.data;\n        } catch (error) {\n            throw new Error(\"API health check failed\");\n        }\n    },\n    // AI Chat\n    async aiChat (messages, provider, model) {\n        try {\n            const response = await axios__WEBPACK_IMPORTED_MODULE_0__[\"default\"].post(\"\".concat(API_BASE_URL, \"/ai/chat\"), {\n                messages,\n                provider,\n                model\n            });\n            return response.data;\n        } catch (error) {\n            var _error_response_data, _error_response;\n            throw new Error(((_error_response = error.response) === null || _error_response === void 0 ? void 0 : (_error_response_data = _error_response.data) === null || _error_response_data === void 0 ? void 0 : _error_response_data.detail) || \"AI chat failed\");\n        }\n    },\n    // MBA (CAT) — fetch MBA colleges by CAT percentile using DB cutoffs\n    async getMBAByCATPercentile (params) {\n        const { percentile, year, states, ownership, include_no_rank = true, tolerance_percent = 0, limit = 200, offset = 0 } = params;\n        const q = {\n            percentile,\n            include_no_rank,\n            tolerance_percent,\n            limit,\n            offset\n        };\n        if (year != null) q.year = year;\n        if (states && states.length) q.states = states.join(\",\");\n        if (ownership) q.ownership = ownership;\n        try {\n            const response = await axios__WEBPACK_IMPORTED_MODULE_0__[\"default\"].get(\"\".concat(API_BASE_URL, \"/db/mba/by-cat-percentile\"), {\n                params: q\n            });\n            return response.data;\n        } catch (error) {\n            var _error_response_data, _error_response;\n            throw new Error(((_error_response = error.response) === null || _error_response === void 0 ? void 0 : (_error_response_data = _error_response.data) === null || _error_response_data === void 0 ? void 0 : _error_response_data.detail) || \"Failed to load MBA colleges for CAT percentile\");\n        }\n    },\n    // MBA (NIRF) — fetch MBA colleges by NIRF-derived percentile from CSV\n    async getMBAByNIRFPercentile (params) {\n        const { percentile, limit = 200, min_score } = params;\n        const q = {\n            percentile,\n            limit\n        };\n        if (min_score != null) q.min_score = min_score;\n        try {\n            const response = await axios__WEBPACK_IMPORTED_MODULE_0__[\"default\"].get(\"\".concat(API_BASE_URL, \"/db/mba/nirf\"), {\n                params: q\n            });\n            return response.data;\n        } catch (error) {\n            var _error_response_data, _error_response;\n            throw new Error(((_error_response = error.response) === null || _error_response === void 0 ? void 0 : (_error_response_data = _error_response.data) === null || _error_response_data === void 0 ? void 0 : _error_response_data.detail) || \"Failed to load MBA colleges by NIRF percentile\");\n        }\n    }\n};\n// Export default for backward compatibility\n/* harmony default export */ __webpack_exports__[\"default\"] = (api);\n\n\n;\n    // Wrapped in an IIFE to avoid polluting the global scope\n    ;\n    (function () {\n        var _a, _b;\n        // Legacy CSS implementations will `eval` browser code in a Node.js context\n        // to extract CSS. For backwards compatibility, we need to check we're in a\n        // browser context before continuing.\n        if (typeof self !== 'undefined' &&\n            // AMP / No-JS mode does not inject these helpers:\n            '$RefreshHelpers$' in self) {\n            // @ts-ignore __webpack_module__ is global\n            var currentExports = module.exports;\n            // @ts-ignore __webpack_module__ is global\n            var prevSignature = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevSignature) !== null && _b !== void 0 ? _b : null;\n            // This cannot happen in MainTemplate because the exports mismatch between\n            // templating and execution.\n            self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id);\n            // A module can be accepted automatically based on its exports, e.g. when\n            // it is a Refresh Boundary.\n            if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n                // Save the previous exports signature on update so we can compare the boundary\n                // signatures. We avoid saving exports themselves since it causes memory leaks (https://github.com/vercel/next.js/pull/53797)\n                module.hot.dispose(function (data) {\n                    data.prevSignature =\n                        self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports);\n                });\n                // Unconditionally accept an update to this module, we'll check if it's\n                // still a Refresh Boundary later.\n                // @ts-ignore importMeta is replaced in the loader\n                module.hot.accept();\n                // This field is set when the previous version of this module was a\n                // Refresh Boundary, letting us know we need to check for invalidation or\n                // enqueue an update.\n                if (prevSignature !== null) {\n                    // A boundary can become ineligible if its exports are incompatible\n                    // with the previous exports.\n                    //\n                    // For example, if you add/remove/change exports, we'll want to\n                    // re-execute the importing modules, and force those components to\n                    // re-render. Similarly, if you convert a class component to a\n                    // function, we want to invalidate the boundary.\n                    if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevSignature, self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports))) {\n                        module.hot.invalidate();\n                    }\n                    else {\n                        self.$RefreshHelpers$.scheduleUpdate();\n                    }\n                }\n            }\n            else {\n                // Since we just executed the code for the module, it's possible that the\n                // new exports made it ineligible for being a boundary.\n                // We only care about the case when we were _previously_ a boundary,\n                // because we already accepted this update (accidental side effect).\n                var isNoLongerABoundary = prevSignature !== null;\n                if (isNoLongerABoundary) {\n                    module.hot.invalidate();\n                }\n            }\n        }\n    })();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./lib/api.ts\n"));

/***/ })

});